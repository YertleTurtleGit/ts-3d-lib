'use strict';const FLOAT_PRECISION="highp",LUMINANCE_CHANNEL_QUANTIFIER=[1/3,1/3,1/3];var SYMBOL;(function(a){a.ADD=" + ";a.SUBTRACT=" - ";a.MULTIPLY=" * ";a.DIVIDE=" / "})(SYMBOL||(SYMBOL={}));var METHOD;(function(a){a.MAXIMUM="max";a.MINIMUM="min";a.INVERSE="inverse";a.NORMALIZE="normalize";a.LENGTH="length";a.SINE="sin";a.COSINE="cos";a.RADIANS="radians"})(METHOD||(METHOD={}));var CUSTOM;(function(a){a.LUMINANCE="luminance";a.CHANNEL="channel";a.VEC3_TO_VEC4="vec3_to_vec4"})(CUSTOM||(CUSTOM={}));
class GLSL_OPERATORS{constructor(){}}GLSL_OPERATORS.ADD={NAME:SYMBOL.ADD,TYPE:SYMBOL};GLSL_OPERATORS.SUBTRACT={NAME:SYMBOL.SUBTRACT,TYPE:SYMBOL};GLSL_OPERATORS.MULTIPLY={NAME:SYMBOL.MULTIPLY,TYPE:SYMBOL};GLSL_OPERATORS.DIVIDE={NAME:SYMBOL.DIVIDE,TYPE:SYMBOL};GLSL_OPERATORS.MAXIMUM={NAME:METHOD.MAXIMUM,TYPE:METHOD};GLSL_OPERATORS.MINIMUM={NAME:METHOD.MINIMUM,TYPE:METHOD};GLSL_OPERATORS.INVERSE={NAME:METHOD.INVERSE,TYPE:METHOD};GLSL_OPERATORS.NORMALIZE={NAME:METHOD.NORMALIZE,TYPE:METHOD};
GLSL_OPERATORS.LENGTH={NAME:METHOD.LENGTH,TYPE:METHOD};GLSL_OPERATORS.SINE={NAME:METHOD.SINE,TYPE:METHOD};GLSL_OPERATORS.COSINE={NAME:METHOD.COSINE,TYPE:METHOD};GLSL_OPERATORS.RADIANS={NAME:METHOD.RADIANS,TYPE:METHOD};GLSL_OPERATORS.LUMINANCE={NAME:CUSTOM.LUMINANCE,TYPE:CUSTOM};GLSL_OPERATORS.CHANNEL={NAME:CUSTOM.CHANNEL,TYPE:CUSTOM};GLSL_OPERATORS.VEC3_TO_VEC4={NAME:CUSTOM.VEC3_TO_VEC4,TYPE:CUSTOM};
class Shader{constructor(){this.glslShader=null}bind(){null!==this.glslShader&&console.warn("Shader is already bound!");this.glslShader=new GlslShader}unbind(){this.glslShader=GlslShader.currentShader=null}purge(){null===this.glslShader?console.warn("No shader bound to purge!"):(this.glslShader.reset(),this.unbind())}}
class GlslShader{constructor(){this.floatPrecision=FLOAT_PRECISION;this.glslImages=[];this.glslCommands=[];GlslShader.currentShader=this;this.glslContext=new GlslContext(WIDTH,HEIGHT)}static getCurrentShader(){return GlslShader.currentShader}reset(){this.glslContext.reset();GlslShader.currentShader=null}static addGlslCommandToCurrentShader(a){GlslShader.getCurrentShader().addGlslCommand(a)}static addGlslImageToCurrentShader(a){GlslShader.getCurrentShader().addGlslImage(a)}static getGlslContext(){return GlslShader.getCurrentShader().glslContext}getGlslImages(){return this.glslImages}getVertexShaderSource(){return"#version 300 es\n\nin vec3 pos;\nin vec2 tex;\n\nout vec2 uv;\n\nvoid main() {\nuv = tex;\ngl_Position = vec4(pos, 1.0);\n}"}getFragmentShaderSource(a){let b=
[];for(let c=0;c<this.glslImages.length;c++)b.push(this.glslImages[c].getGlslDefinition());return["#version 300 es","precision "+this.floatPrecision+" float;","\nin vec2 uv;\nout vec4 fragColor;\n",...b,"\nfloat luminance(vec4 image) {","return image.r * "+GlslFloat.getJsNumberAsString(LUMINANCE_CHANNEL_QUANTIFIER[0])+" + image.g * "+GlslFloat.getJsNumberAsString(LUMINANCE_CHANNEL_QUANTIFIER[1])+" + image.b * "+GlslFloat.getJsNumberAsString(LUMINANCE_CHANNEL_QUANTIFIER[2])+";","}\n\nvoid main() {",
...this.glslCommands,"fragColor = "+a.getGlslName()+";","}"].join("\n")}addGlslCommand(a){this.glslCommands.push(a)}addGlslImage(a){this.glslImages.push(a)}}
class GlslContext{constructor(a,b){this.glslShader=GlslShader.getCurrentShader();this.glCanvas=document.createElement("canvas");this.glCanvas.width=a;this.glCanvas.height=b;this.glContext=this.glCanvas.getContext("webgl2")}reset(){this.glContext.flush();this.glContext.finish();this.glCanvas.remove();this.glContext.getExtension("WEBGL_lose_context").loseContext()}getGlContext(){return this.glContext}renderPixelArray(a){return this.renderToPixelArray(a)}renderDataUrl(){return this.glCanvas.toDataURL()}createShaderProgram(a){let b=this.glContext.createShader(this.glContext.VERTEX_SHADER),
c=this.glContext.createShader(this.glContext.FRAGMENT_SHADER);var d=this.glslShader.getVertexShaderSource();a=this.glslShader.getFragmentShaderSource(a);this.glContext.shaderSource(b,d);this.glContext.shaderSource(c,a);updateStatus("Compiling shader program.");this.glContext.compileShader(b);this.glContext.compileShader(c);d=this.glContext.createProgram();this.glContext.attachShader(d,b);this.glContext.attachShader(d,c);this.glContext.linkProgram(d);return d}loadGlslImages(a){const b=this.glslShader.getGlslImages();
updateStatus("Loading "+b.length+" image(s) for gpu.");for(let c=0;c<b.length;c++)b[c].loadIntoShaderProgram(this.glContext,a,c)}getFrameVAO(a){var b=this.glContext.getAttribLocation(a,"pos");a=this.glContext.getAttribLocation(a,"tex");const c=Float32Array.BYTES_PER_ELEMENT;let d=this.glContext.createVertexArray();this.glContext.bindVertexArray(d);let e=this.glContext.createBuffer();this.glContext.bindBuffer(this.glContext.ARRAY_BUFFER,e);this.glContext.bufferData(this.glContext.ARRAY_BUFFER,new Float32Array([-1,
1,1,1,-1,-1,-1,-1,1,1,1,-1]),this.glContext.STATIC_DRAW);this.glContext.vertexAttribPointer(b,2,this.glContext.FLOAT,!1,2*c,0);this.glContext.enableVertexAttribArray(b);this.glContext.bindBuffer(this.glContext.ARRAY_BUFFER,null);b=this.glContext.createBuffer();this.glContext.bindBuffer(this.glContext.ARRAY_BUFFER,b);this.glContext.bufferData(this.glContext.ARRAY_BUFFER,new Float32Array([0,0,1,0,0,1,0,1,1,0,1,1]),this.glContext.STATIC_DRAW);this.glContext.vertexAttribPointer(a,2,this.glContext.FLOAT,
!1,2*c,0);this.glContext.enableVertexAttribArray(a);this.glContext.bindBuffer(this.glContext.ARRAY_BUFFER,null);this.glContext.bindVertexArray(null);return d}drawArraysFromVAO(a){this.glContext.viewport(0,0,this.glCanvas.width,this.glCanvas.height);this.glContext.clearColor(0,0,0,0);this.glContext.clear(this.glContext.COLOR_BUFFER_BIT|this.glContext.DEPTH_BUFFER_BIT);this.glContext.blendFunc(this.glContext.SRC_ALPHA,this.glContext.ONE);this.glContext.enable(this.glContext.BLEND);this.glContext.disable(this.glContext.DEPTH_TEST);
this.glContext.bindVertexArray(a);this.glContext.drawArrays(this.glContext.TRIANGLES,0,6);this.glContext.bindVertexArray(null)}readToPixelArray(){let a=new Uint8Array(this.glCanvas.width*this.glCanvas.height*4);this.glContext.readPixels(0,0,this.glCanvas.width,this.glCanvas.height,this.glContext.RGBA,this.glContext.UNSIGNED_BYTE,a);return a}renderToPixelArray(a){this.drawCall(a);return this.readToPixelArray()}drawCall(a){a=this.createShaderProgram(a);this.glContext.useProgram(a);this.loadGlslImages(a);
updateStatus("Rendering on gpu.");a=this.getFrameVAO(a);this.drawArraysFromVAO(a)}}
class GlslRendering{constructor(a,b){this.glslContext=a;this.outVariable=b}static render(a){return new GlslRendering(GlslShader.getGlslContext(),a)}getPixelArray(){void 0===this.pixelArray&&(this.pixelArray=this.glslContext.renderPixelArray(this.outVariable));return this.pixelArray}getDataUrl(){void 0===this.dataUrl&&(this.getPixelArray(),this.dataUrl=this.glslContext.renderDataUrl());return this.dataUrl}getJsImage(a){void 0===this.jsImage&&(this.jsImage=new Image,this.jsImage.addEventListener("load",
a),this.jsImage.src=this.getDataUrl());return this.jsImage}}
class GlslOperation{constructor(a,b,c,d){this.callingParameter=a;this.result=b;this.parameters=c;this.glslOperator=d}static getGlslExpressionOfParams(a,b){return 1===b.length?b[0]:2===b.length?a+"("+b[0]+", "+b[1]+")":a+"("+b.pop()+", "+GlslOperation.getGlslExpressionOfParams(a,b)+")"}getDeclaration(){const a=GlslVariable.getGlslNamesOfGlslVariables(this.parameters);if(this.glslOperator.TYPE===SYMBOL)return a.unshift(this.callingParameter.getGlslName()),this.result.getGlslName()+" = "+a.join(this.glslOperator.NAME)+
";";if(this.glslOperator.TYPE===METHOD)return this.glslOperator.NAME===METHOD.MAXIMUM||this.glslOperator.NAME===METHOD.MINIMUM?(a.unshift(this.callingParameter.getGlslName()),this.result.getGlslName()+" = "+GlslOperation.getGlslExpressionOfParams(this.glslOperator.NAME,a)+";"):this.result.getGlslName()+" = "+this.glslOperator.NAME+"("+a.join(", ")+");";if(this.glslOperator.TYPE===CUSTOM){if(this.glslOperator.NAME===CUSTOM.CHANNEL)return this.result.getGlslName()+" = "+a[0]+"["+a[1]+"];";if(this.glslOperator.NAME===
CUSTOM.VEC3_TO_VEC4)return this.result.getGlslName()+" = vec4("+a[0]+", "+a[1]+");";if(this.glslOperator.NAME===CUSTOM.LUMINANCE)return this.result.getGlslName()+" = "+this.glslOperator.NAME+"("+a[0]+");"}}}
class GlslImage{constructor(a){this.jsImage=a;this.uniformGlslName=GlslVariable.getUniqueName("uniform");this.glslVector4=new GlslVector4(null,"texture("+this.uniformGlslName+", uv)");GlslShader.addGlslImageToCurrentShader(this)}static load(a){return(new GlslImage(a)).glslVector4}getGlslDefinition(){return"uniform sampler2D "+this.uniformGlslName+";"}createTexture(a){let b=a.createTexture();a.bindTexture(a.TEXTURE_2D,b);a.texParameteri(a.TEXTURE_2D,a.TEXTURE_WRAP_S,a.CLAMP_TO_EDGE);a.texParameteri(a.TEXTURE_2D,
a.TEXTURE_WRAP_T,a.CLAMP_TO_EDGE);a.texParameteri(a.TEXTURE_2D,a.TEXTURE_MIN_FILTER,a.LINEAR);a.texParameteri(a.TEXTURE_2D,a.TEXTURE_MAG_FILTER,a.LINEAR);a.texImage2D(a.TEXTURE_2D,0,a.RGBA,a.RGBA,a.UNSIGNED_BYTE,this.jsImage);return b}loadIntoShaderProgram(a,b,c){a.activeTexture(a.TEXTURE0+c);a.bindTexture(a.TEXTURE_2D,this.createTexture(a));a.uniform1i(a.getUniformLocation(b,this.uniformGlslName),c)}}
class GlslVariable{constructor(a=""){this.glslName=GlslVariable.getUniqueName(this.getGlslVarType());null!==a&&(""!==a&&(a=" = "+a),GlslShader.addGlslCommandToCurrentShader(this.getGlslVarType()+" "+this.getGlslName()+a+";"))}static getUniqueName(a){GlslVariable.uniqueNumber++;return a+"_"+GlslVariable.uniqueNumber.toString()}static getGlslNamesOfGlslVariables(a){let b=[];if(null!==a)for(let c=0;c<a.length;c++)b.push(a[c].getGlslName());return b}getGlslName(){return this.glslName}declareGlslResult(a){GlslShader.addGlslCommandToCurrentShader(a.getDeclaration())}getGlslFloatResult(a,
b){const c=new GlslFloat;this.declareGlslResult(new GlslOperation(this,c,a,b));return c}getGlslVector3Result(a,b){const c=new GlslVector3;this.declareGlslResult(new GlslOperation(this,c,a,b));return c}getGlslVector4Result(a,b){const c=new GlslVector4;this.declareGlslResult(new GlslOperation(this,c,a,b));return c}getGlslMatrix3Result(a,b){const c=new GlslMatrix3;this.declareGlslResult(new GlslOperation(this,c,a,b));return c}}GlslVariable.uniqueNumber=0;
class GlslVector extends GlslVariable{channel(a){return this.getGlslFloatResult([this,new GlslInteger(a)],GLSL_OPERATORS.CHANNEL)}}class GlslMatrix extends GlslVariable{}
class GlslInteger extends GlslVariable{constructor(a=null){null!==a?(super(null),this.glslName=a.toString()):super()}getGlslVarType(){return"int"}addFloat(...a){throw Error("Method not implemented.");}addVector3(...a){throw Error("Method not implemented.");}addVector4(...a){throw Error("Method not implemented.");}addMatrix3(...a){throw Error("Method not implemented.");}subtractFloat(...a){throw Error("Method not implemented.");}subtractVector3(...a){throw Error("Method not implemented.");}subtractVector4(...a){throw Error("Method not implemented.");
}subtractMatrix3(...a){throw Error("Method not implemented.");}multiplyFloat(...a){throw Error("Method not implemented.");}multiplyVector3(...a){throw Error("Method not implemented.");}multiplyVector4(...a){throw Error("Method not implemented.");}multiplyMatrix3(...a){throw Error("Method not implemented.");}divideFloat(...a){throw Error("Method not implemented.");}}
class GlslFloat extends GlslVariable{static getJsNumberAsString(a){return Math.trunc(a)===a?a.toString()+".0":a.toString().includes("e-")?"0.0":a.toString()}constructor(a=null){null!==a?(super(null),this.glslName=GlslFloat.getJsNumberAsString(a)):super()}getGlslName(){return this.glslName}getGlslVarType(){return"float"}addFloat(...a){return this.getGlslFloatResult(a,GLSL_OPERATORS.ADD)}addVector3(...a){return this.getGlslVector3Result(a,GLSL_OPERATORS.ADD)}addVector4(...a){return this.getGlslVector4Result(a,
GLSL_OPERATORS.ADD)}addMatrix3(...a){return this.getGlslMatrix3Result(a,GLSL_OPERATORS.ADD)}subtractFloat(...a){return this.getGlslFloatResult(a,GLSL_OPERATORS.SUBTRACT)}subtractVector3(...a){return this.getGlslVector3Result(a,GLSL_OPERATORS.SUBTRACT)}subtractVector4(...a){return this.getGlslVector4Result(a,GLSL_OPERATORS.SUBTRACT)}subtractMatrix3(...a){return this.getGlslMatrix3Result(a,GLSL_OPERATORS.SUBTRACT)}multiplyFloat(...a){return this.getGlslFloatResult(a,GLSL_OPERATORS.MULTIPLY)}multiplyVector3(...a){return this.getGlslVector3Result(a,
GLSL_OPERATORS.MULTIPLY)}multiplyVector4(...a){return this.getGlslVector4Result(a,GLSL_OPERATORS.MULTIPLY)}multiplyMatrix3(...a){return this.getGlslMatrix3Result(a,GLSL_OPERATORS.MULTIPLY)}divideFloat(...a){return this.getGlslFloatResult(a,GLSL_OPERATORS.DIVIDE)}maximum(...a){return this.getGlslFloatResult(a,GLSL_OPERATORS.MAXIMUM)}minimum(...a){return this.getGlslFloatResult(a,GLSL_OPERATORS.MINIMUM)}radians(){return this.getGlslFloatResult([this],GLSL_OPERATORS.RADIANS)}sin(){return this.getGlslFloatResult([this],
GLSL_OPERATORS.SINE)}cos(){return this.getGlslFloatResult([this],GLSL_OPERATORS.COSINE)}}
class GlslVector3 extends GlslVector{constructor(a){var b="";if(void 0!==a){b=[];for(let c=0;c<a.length;c++)b.push(a[c].getGlslName());b="vec3("+b.join(", ")+")"}super(b)}getGlslVarType(){return"vec3"}addFloat(...a){return this.getGlslVector3Result(a,GLSL_OPERATORS.ADD)}addVector3(...a){return this.getGlslVector3Result(a,GLSL_OPERATORS.ADD)}addVector4(...a){throw Error("Not possible to add vec4 to vec3.");}addMatrix3(...a){throw Error("Not possible to add mat3 to vec3.");}subtractFloat(...a){return this.getGlslVector3Result(a,
GLSL_OPERATORS.SUBTRACT)}subtractVector3(...a){return this.getGlslVector3Result(a,GLSL_OPERATORS.SUBTRACT)}subtractVector4(...a){throw Error("Not possible to subtract vec4 from vec3.");}subtractMatrix3(...a){throw Error("Not possible to subtract mat3 from vec3.");}multiplyFloat(...a){return this.getGlslVector3Result(a,GLSL_OPERATORS.MULTIPLY)}multiplyVector3(...a){return this.getGlslVector3Result(a,GLSL_OPERATORS.MULTIPLY)}multiplyVector4(...a){throw Error("Not possible to multiply vec4 with vec3.");
}multiplyMatrix3(...a){return this.getGlslVector3Result(a,GLSL_OPERATORS.MULTIPLY)}divideFloat(...a){return this.getGlslVector3Result(a,GLSL_OPERATORS.DIVIDE)}length(){return this.getGlslFloatResult([this],GLSL_OPERATORS.LENGTH)}normalize(){return this.getGlslVector3Result([this],GLSL_OPERATORS.NORMALIZE)}maximum(...a){return this.getGlslVector3Result(a,GLSL_OPERATORS.MAXIMUM)}minimum(...a){return this.getGlslVector3Result(a,GLSL_OPERATORS.MINIMUM)}getVector4(a=new GlslFloat(1)){return this.getGlslVector4Result([this,
a],GLSL_OPERATORS.VEC3_TO_VEC4)}}
class GlslVector4 extends GlslVector{constructor(a,b=""){if(""===b&&void 0!==a&&null!==a){b=[];for(let c=0;c<a.length;c++)b.push(a[c].getGlslName());b="vec4("+b.join(", ")+")"}super(b)}getGlslVarType(){return"vec4"}addFloat(...a){return this.getGlslVector4Result(a,GLSL_OPERATORS.ADD)}addVector3(...a){throw Error("Not possible to add vec3 to vec4.");}addVector4(...a){return this.getGlslVector4Result(a,GLSL_OPERATORS.ADD)}addMatrix3(...a){throw Error("Not possible to add mat3 to vec4.");}subtractFloat(...a){return this.getGlslVector4Result(a,
GLSL_OPERATORS.SUBTRACT)}subtractVector3(...a){throw Error("Not possible to subtract vec3 from vec4.");}subtractVector4(...a){return this.getGlslVector4Result(a,GLSL_OPERATORS.SUBTRACT)}subtractMatrix3(...a){throw Error("Not possible to subtract mat3 from vec4.");}multiplyFloat(...a){return this.getGlslVector4Result(a,GLSL_OPERATORS.MULTIPLY)}multiplyVector3(...a){throw Error("Not possible to multiply vec3 with vec4.");}multiplyVector4(...a){return this.getGlslVector4Result(a,GLSL_OPERATORS.MULTIPLY)}multiplyMatrix3(...a){throw Error("Not possible to multiply mat3 with vec4.");
}divideFloat(...a){return this.getGlslVector4Result(a,GLSL_OPERATORS.DIVIDE)}length(){return this.getGlslFloatResult([this],GLSL_OPERATORS.LENGTH)}normalize(){return this.getGlslVector4Result([this],GLSL_OPERATORS.NORMALIZE)}maximum(...a){return this.getGlslVector4Result(a,GLSL_OPERATORS.MAXIMUM)}minimum(...a){return this.getGlslVector4Result(a,GLSL_OPERATORS.MINIMUM)}getLuminanceFloat(){return this.getGlslFloatResult([this],GLSL_OPERATORS.LUMINANCE)}}
class GlslMatrix3 extends GlslMatrix{constructor(a){let b="";if(void 0!==a){let c=[[null,null,null],[null,null,null],[null,null,null]];for(let d=0;d<a.length;d++)for(let e=0;e<a[0].length;e++)c[d][e]=a[d][e].getGlslName();void 0!==a&&(b="mat3("+c[0][0]+", "+c[1][0]+", "+c[2][0]+", "+c[0][1]+", "+c[1][1]+", "+c[2][1]+", "+c[0][2]+", "+c[1][2]+", "+c[2][2]+")")}super(b)}getGlslVarType(){return"mat3"}addFloat(...a){return this.getGlslMatrix3Result(a,GLSL_OPERATORS.ADD)}addVector3(...a){throw Error("Not possible to add vec3 to mat3.");
}addVector4(...a){throw Error("Not possible to add vec4 to mat3.");}addMatrix3(...a){return this.getGlslMatrix3Result(a,GLSL_OPERATORS.ADD)}subtractFloat(...a){return this.getGlslMatrix3Result(a,GLSL_OPERATORS.SUBTRACT)}subtractVector3(...a){throw Error("Not possible to subtract vec3 from mat3.");}subtractVector4(...a){throw Error("Not possible to subtract vec4 from mat3.");}subtractMatrix3(...a){return this.getGlslMatrix3Result(a,GLSL_OPERATORS.SUBTRACT)}multiplyFloat(...a){return this.getGlslMatrix3Result(a,
GLSL_OPERATORS.MULTIPLY)}multiplyVector3(...a){return this.getGlslVector3Result(a,GLSL_OPERATORS.MULTIPLY)}multiplyVector4(...a){throw Error("Not possible to multiply vec4 with mat3.");}multiplyMatrix3(...a){return this.getGlslMatrix3Result(a,GLSL_OPERATORS.MULTIPLY)}divideFloat(...a){return this.getGlslMatrix3Result(a,GLSL_OPERATORS.DIVIDE)}inverse(){return this.getGlslMatrix3Result([this],GLSL_OPERATORS.INVERSE)}};