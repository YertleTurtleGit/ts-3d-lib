'use strict';class Dataset{constructor(a,b){this.lightingAzimuthalAngles=a;this.lightingCoordinates=null;this.dataLoadedCallback=b;this.jsImageObjects=Array(a.length).fill(null);this.type=this.dataInput=this.noLightImageObject=null}getLightingCoordinates(a){if(null===this.lightingCoordinates){this.lightingCoordinates=[];for(let b=0;b<this.lightingAzimuthalAngles.length;b++)this.lightingCoordinates.push(new SphericalCoordinate(this.lightingAzimuthalAngles[b],a))}return this.lightingCoordinates}getImageDimensions(){return this.isOnlyNormalMap()?
[this.normalMapImageObject.width,this.normalMapImageObject.height]:[this.jsImageObjects[0].width,this.jsImageObjects[0].height]}getType(){return this.type}listenForDrop(a){a.addEventListener("dragover",function(b){b.preventDefault()},!1);a.addEventListener("drop",this.dataDropped.bind(this,a),!1)}dataDropped(a,b){b.preventDefault();this.type="drop";this.dataInput=new DataInput(this);b=new DropInput(this.dataInput,b.dataTransfer.files,this.dataLoaded.bind(this),this);this.dataInput.setInputClass(b);
this.onlyNormalMap=b.isOnlyNormalMap();a.style.display="none";this.showLoadingArea()}showLoadingArea(){LOADING_AREA.style.display="block"}listenForTestButtonClick(a){a.addEventListener("click",this.testButtonClicked.bind(this))}testButtonClicked(){this.type="test";this.dataInput=new DataInput(this);this.getLightingCoordinates(TEST_POLAR_ANGLE);this.dataInput.setInputClass(new TestInput(this.dataInput,this.dataLoaded.bind(this)))}listenForWebcamButtonClick(a,b){a.addEventListener("click",this.webcamButtonClicked.bind(this,
b),!1)}webcamButtonClicked(a){this.type="webcam";this.getLightingCoordinates(WEBCAM_POLAR_ANGLE);this.dataInput=new DataInput(this);this.dataInput.setInputClass(new WebcamInput(this.dataInput,a,this.lightingCoordinates,this.dataLoaded.bind(this)))}isOnlyNormalMap(){return this.onlyNormalMap}getNormalMapImage(){if(this.onlyNormalMap)return this.normalMapImageObject;throw Error("Dataset: Normal mapping was not found in input.");}setNormalMapImage(a){this.normalMapImageObject=a}setImage(a,b){for(let c=
0;c<this.lightingAzimuthalAngles.length;c++)if(this.lightingAzimuthalAngles[c]===a.getAzimuthalAngle()){this.jsImageObjects[c]=b;return}null===a.getAzimuthalAngle()&&(this.noLightImageObject=b);console.warn("Not found lighting angle in dataset to set image.")}getImage(a){for(let b=0;b<this.lightingAzimuthalAngles.length;b++)if(this.lightingCoordinates[b].getAzimuthalAngle()===a)return this.jsImageObjects[b];if(null===a)return this.noLightImageObject;console.warn("Not found lighting angle in dataset to get image.");
return null}getPolarAngle(a){for(let b=0;b<this.lightingAzimuthalAngles.length;b++)if(this.lightingCoordinates[b].getAzimuthalAngle()===a)return this.lightingCoordinates[b].getPolarAngle();console.warn("Not found lighting angle in dataset to get image.");return null}getObjectName(){return this.dataInput.getObjectName()}dataLoaded(){setTimeout(this.dataLoadedCallback,0)}}
class DataInput{constructor(a){this.dataset=a;this.type=a.getType();this.inputClass=null}getObjectName(){return this.inputClass.getObjectName()}setInputClass(a){this.inputClass=a}inputImage(a,b){this.dataset.setImage(a,b)}}
class TestInput{constructor(a,b){this.loadedImages=0;this.dataInput=a;this.testDataLoadedCallback=b;INPUT_DROP_AREA.remove();LOADING_AREA.style.display="block";this.loadAllImages()}getObjectName(){return TEST_OBJECT_NAME}singleImageLoaded(a,b){this.loadedImages++;this.dataInput.inputImage(b,a);this.loadedImages===LIGHTING_AZIMUTHAL_ANGLES.length&&setTimeout(this.testDataLoadedCallback,0)}loadAllImages(){let a=""+TEST_POLAR_ANGLE;for(;3>a.length;)a="0"+a;for(let c=0;c<LIGHTING_AZIMUTHAL_ANGLES.length;c++){for(var b=
""+LIGHTING_AZIMUTHAL_ANGLES[c];3>b.length;)b="0"+b;b=TEST_OBJECT_NAME+"_"+b+"_"+a+"."+TEST_FILE_EXTENSION;let d=new Image;d.addEventListener("load",this.singleImageLoaded.bind(this,d,new SphericalCoordinate(LIGHTING_AZIMUTHAL_ANGLES[c],TEST_POLAR_ANGLE)));d.crossOrigin="anonymous";d.src=TEST_DATASET_FOLDER+b}}}
class DropInput{constructor(a,b,c,d){this.dataInput=a;this.lightingCoordinates=null;this.droppedDataLoadedCallback=c;this.droppedFiles=b;this.dataset=d;this.objectName=null;this.imagesLoaded=0;this.loadAllImages()}isOnlyNormalMap(){return 1===this.droppedFiles.length}getObjectName(){return this.objectName}loadAllImages(){console.log("Loading "+this.droppedFiles.length+" images for cpu.");if(this.isOnlyNormalMap()){if(!this.droppedFiles[0].type.startsWith("image"))throw Error("File is not of type image.");
const d=this.droppedDataLoadedCallback,g=this.dataset,e=new FileReader;e.addEventListener("load",function(){let f=new Image;f.addEventListener("load",function(){setTimeout(d,0)});f.src=String(e.result);g.setNormalMapImage(f)});e.readAsDataURL(this.droppedFiles[0])}else{var a=this.droppedFiles[0].name.split(".")[0],b=Number(a.split("_",3)[2]);this.objectName=a.split("_",1)[0];this.lightingCoordinates=this.dataset.getLightingCoordinates(b);for(a=0;a<this.droppedFiles.length;a++){var c=this.droppedFiles[a].name.split(".")[0];
b=Number(c.split("_",2)[1]);c=Number(c.split("_",3)[2]);c=new SphericalCoordinate(b,c);const d=this.droppedFiles[a].type;LIGHTING_AZIMUTHAL_ANGLES.includes(b)&&d.startsWith("image")?(b=new FileReader,b.addEventListener("load",this.readerLoaded.bind(this,b,c)),b.readAsDataURL(this.droppedFiles[a])):this.imagesLoaded++}}}readerLoaded(a,b){let c=new Image;c.addEventListener("load",this.imageLoaded.bind(this,c,b));c.src=String(a.result)}imageLoaded(a,b){uiLog("Image with spherical degree "+b.getDisplayString()+
" loaded.",1);this.imagesLoaded++;a.removeEventListener("load",this.imageLoaded.bind(this));this.dataInput.inputImage(b,a);this.imagesLoaded===this.lightingCoordinates.length&&setTimeout(this.droppedDataLoadedCallback,0)}}
class WebcamInput{constructor(a,b,c,d){this.noLightImageObject=this.noLightImageData=null;IS_WEBCAM=!0;this.dataInput=a;this.gradientLighting=new GradientLighting;this.webcam=new Webcam(b,this.startCapture.bind(this));this.dataLoadedCallback=d;this.imageDataList=Array(c.length).fill(null);this.jsImageObjectList=Array(c.length).fill(null);this.lightingCoordinates=c;this.loadedImages=0;document.documentElement.requestFullscreen();this.webcam.startStreaming()}getObjectName(){return"webcam"}getNextLightingAngleIndex(){for(let a=
0;a<this.lightingCoordinates.length;a++)if(null==this.imageDataList[a])return a;return null}setImageData(a,b){for(let c=0;c<this.lightingCoordinates.length;c++)if(this.lightingCoordinates[c].getAzimuthalAngle()===a.getAzimuthalAngle())return this.imageDataList[c]=b,this.capture(),c;if(null===a.getAzimuthalAngle())return this.noLightImageData=b,this.capture(),null}startCapture(){this.webcam.purgeDisplay();this.gradientLighting.display(this.lightingCoordinates[0].getAzimuthalAngle(),this.singleCapture.bind(this,
this.lightingCoordinates[0]))}imageLoadedFromData(a,b){console.log(b.getDisplayString()+" image loaded.");this.loadedImages++;this.dataInput.inputImage(b,a);this.loadedImages==this.lightingCoordinates.length&&(console.log("All images from webcam loaded."),document.exitFullscreen(),setTimeout(this.dataLoadedCallback,0))}loadAllImagesFromData(){for(var a=0;a<this.lightingCoordinates.length;a++){const b=new Image;b.addEventListener("load",this.imageLoadedFromData.bind(this,b,this.lightingCoordinates[a]));
b.src=this.imageDataList[a]}a=new Image;a.addEventListener("load",this.imageLoadedFromData.bind(this,a,new SphericalCoordinate(null,null)));a.src=this.noLightImageData}capture(){var a=this.getNextLightingAngleIndex();null!==a?(a=this.lightingCoordinates[a].getAzimuthalAngle(),this.gradientLighting.display(a,this.singleCapture.bind(this,new SphericalCoordinate(a,WEBCAM_POLAR_ANGLE)))):null===this.noLightImageData?this.gradientLighting.display(null,this.singleCapture.bind(this,new SphericalCoordinate(null,
null))):(this.gradientLighting.hide(),this.webcam.purge(),this.loadAllImagesFromData())}singleCapture(a){console.log("capture "+a.getDisplayString()+" degree image.");setTimeout(this.setImageData.bind(this,a,this.webcam.takePicture()),1E3)}};