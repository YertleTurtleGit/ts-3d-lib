'use strict';class NormalMap{constructor(b){this.dataset=b;this.dataUrl=this.pixelArray=this.jsImageObject=null}static getFromJsImageObject(b){const c=new NormalMap(null);c.jsImageObject=b;const a=new Shader;a.bind();b=GlslRendering.render(GlslImage.load(b));c.pixelArray=b.getPixelArray();c.dataUrl=b.getDataUrl();a.purge();return c}downloadAsImage(b){b+=".png";let c=document.createElement("a");c.setAttribute("href",this.getAsDataUrl());c.setAttribute("download",b);c.style.display="none";document.body.appendChild(c);
c.click();document.body.removeChild(c)}getAsDataUrl(){if(null!==this.dataUrl)return this.dataUrl;console.warn("Call calculate first.");return null}getAsPixelArray(){if(null!==this.pixelArray)return this.pixelArray;console.warn("Call calculate first.");return null}getAsJsImageObject(){if(null!==this.jsImageObject)return this.jsImageObject;console.warn("Call calculate first.");return null}calculate(b){let c=new Shader;c.bind();var a=[];for(var d=0;d<LIGHTING_AZIMUTHAL_ANGLES.length;d++)a.push(GlslImage.load(dataset.getImage(LIGHTING_AZIMUTHAL_ANGLES[d])));
d=a[0].maximum(...a);a[0].minimum(...a);d=d.getLuminanceFloat();var e=a[LIGHTING_AZIMUTHAL_ANGLES.indexOf(NORTH)].getLuminanceFloat(),f=a[LIGHTING_AZIMUTHAL_ANGLES.indexOf(NORTH_EAST)].getLuminanceFloat();let g=a[LIGHTING_AZIMUTHAL_ANGLES.indexOf(EAST)].getLuminanceFloat(),h=a[LIGHTING_AZIMUTHAL_ANGLES.indexOf(SOUTH_EAST)].getLuminanceFloat(),k=a[LIGHTING_AZIMUTHAL_ANGLES.indexOf(SOUTH)].getLuminanceFloat(),l=a[LIGHTING_AZIMUTHAL_ANGLES.indexOf(SOUTH_WEST)].getLuminanceFloat(),m=a[LIGHTING_AZIMUTHAL_ANGLES.indexOf(WEST)].getLuminanceFloat();
a=a[LIGHTING_AZIMUTHAL_ANGLES.indexOf(NORTH_WEST)].getLuminanceFloat();null!==this.dataset.getImage(null)&&(console.log("HAS NO LIGHT IMAGE!"),a=GlslImage.load(this.dataset.getImage(null)).getLuminanceFloat(),d=d.subtractFloat(a),e=e.subtractFloat(a),f=e.subtractFloat(a),g=e.subtractFloat(a),h=e.subtractFloat(a),k=e.subtractFloat(a),l=e.subtractFloat(a),m=e.subtractFloat(a),a=e.subtractFloat(a));e=e.divideFloat(d);f=f.divideFloat(d);g=g.divideFloat(d);h=h.divideFloat(d);k=k.divideFloat(d);l=l.divideFloat(d);
m=m.divideFloat(d);a=a.divideFloat(d);a=[e,f,g,h,k,l,m,a];d=[[WEST,NORTH,EAST],[WEST,SOUTH,EAST],[SOUTH,WEST,NORTH],[SOUTH,EAST,NORTH],[NORTH_WEST,NORTH_EAST,SOUTH_EAST],[NORTH_WEST,SOUTH_WEST,SOUTH_EAST],[NORTH_EAST,SOUTH_EAST,SOUTH_WEST],[NORTH_EAST,NORTH_WEST,SOUTH_WEST]];uiBaseLayer++;uiLog("Calculating anisotropic reflection matrices.");uiBaseLayer--;e=[];for(f=0;f<d.length;f++)e.push(this.getAnisotropicNormalVector(a,...d[f]));a=(new GlslVector3([new GlslFloat(0),new GlslFloat(0),new GlslFloat(0)])).addVector3(...e).divideFloat(new GlslFloat(e.length));
a=(new GlslVector3([a.channel(1),a.channel(0),a.channel(2)])).getVector4();a=GlslRendering.render(a);this.pixelArray=a.getPixelArray();this.dataUrl=a.getDataUrl();this.jsImageObject=a.getJsImage(b);c.purge()}getAnisotropicNormalVector(b,c,a,d){const e=this.getLights(c,a,d);c=b[LIGHTING_AZIMUTHAL_ANGLES.indexOf(c)];a=b[LIGHTING_AZIMUTHAL_ANGLES.indexOf(a)];b=b[LIGHTING_AZIMUTHAL_ANGLES.indexOf(d)];b=new GlslVector3([c,a,b]);return e.multiplyVector3(b).normalize().addFloat(new GlslFloat(1)).divideFloat(new GlslFloat(2))}getLights(b,
c,a){b=this.getLightDirectionVector(b);c=this.getLightDirectionVector(c);a=this.getLightDirectionVector(a);return(new GlslMatrix3([[b.channel(0),b.channel(1),b.channel(2)],[c.channel(0),c.channel(1),c.channel(2)],[a.channel(0),a.channel(1),a.channel(2)]])).inverse()}getLightDirectionVector(b){var c=this.dataset.getPolarAngle(b),a=(new GlslFloat(c)).radians();c=(new GlslFloat(b)).radians();b=a.sin();a=a.cos();let d=c.sin();c=c.cos();return(new GlslVector3([b.multiplyFloat(c),b.multiplyFloat(d),a])).normalize()}}
;