'use strict';const SLOPE_SHIFT=-127.5;
class PointCloud{constructor(a,b,c,d,f,e,g){this.gpuVertexAlbedoColors=[];this.gpuVertexNormalColors=[];this.normalMap=a;this.depthFactor=d;this.width=b;this.height=c;this.maxVertexCount=f;this.azimuthalAngles=e;this.vertexAlbedoColors=g}getWidth(){return this.width}getHeight(){return this.height}getAzimuthalAngles(){return this.azimuthalAngles}downloadObj(a,b){a+=".obj";b=document.createElement("a");b.style.display="none";let c=new Blob([this.getObjString()],{type:"text/plain; charset = utf-8"}),
d=window.URL.createObjectURL(c);b.setAttribute("href",window.URL.createObjectURL(c));b.setAttribute("download",a);document.body.appendChild(b);b.click();window.URL.revokeObjectURL(d);b.remove()}getEdgeFramePixels(){if(void 0===this.edgeFramePixels){this.edgeFramePixels=[];var a=this.height;const b=this.width;for(let c=0;c<this.width;c++)this.edgeFramePixels.push({x:c,y:-1}),this.edgeFramePixels.push({x:c,y:a});for(a=0;a<this.height;a++)this.edgeFramePixels.push({x:-1,y:a}),this.edgeFramePixels.push({x:b,
y:a})}return this.edgeFramePixels}isInDimensions(a){return a.x<this.width&&a.y<this.height&&0<=a.x&&0<=a.y}getPixelLine(a,b,c){const d=[];var f=a.x,e=a.y;a={x:a.x,y:a.y};do{do{f+=b.x;e+=b.y;var g=Math.round(f);var h=Math.round(e)}while(g===a.x&&h===a.y);a.x=g;a.y=h;if(g=this.isInDimensions(a))h=this.getPixelSlope(a,b,c),d.push({x:a.x,y:a.y,slope:h})}while(g);return d}getPixelLinesFromAzimuthalAngle(a,b){const c=[];a=(a+180)*DEGREE_TO_RADIAN_FACTOR;a={x:Math.cos(a),y:Math.sin(a)};1e-8>a.x&&-1e-8<a.x&&
(a.x=0);1e-8>a.y&&-1e-8<a.y&&(a.y=0);for(let f=0;f<this.getEdgeFramePixels().length;f++){var d=this.getEdgeFramePixels()[f];d=this.getPixelLine(d,a,b);1<d.length&&c.push(d)}return c}isPixelMaskedOut(a){return 229.5<={red:this.normalMap.getAsPixelArray()[a+0],green:this.normalMap.getAsPixelArray()[a+1],blue:this.normalMap.getAsPixelArray()[a+2]}.blue?!0:!1}getPixelSlope(a,b,c){a=4*(a.x+a.y*this.width);return b.x*(c[a+0]+SLOPE_SHIFT)+b.y*(c[a+1]+SLOPE_SHIFT)}getAnglesZValues(){void 0===this.anglesZValues&&
this.calculate();return this.anglesZValues}async calculate(){uiBaseLayer--;uiLog("Integrating normal map.");uiBaseLayer++;uiLog("Applying local gradient factor.");uiBaseLayer++;var a=new Shader;a.bind();var b=GlslImage.load(this.normalMap.getAsJsImageObject()),c=b.channel(0),d=b.channel(1);b=b.channel(2);c=new GlslVector3([c.divideFloat(b),d.divideFloat(b),b]);c=GlslRendering.render(c.getVector4()).getPixelArray();a.purge();uiBaseLayer--;uiLog("Calculating anisotropic integrals.");this.anglesZValues=
Array(this.azimuthalAngles.length);for(a=0;a<this.anglesZValues.length;a++){d=this.getPixelLinesFromAzimuthalAngle(this.azimuthalAngles[a],c);uiBaseLayer++;uiLog("Calculating "+d.length+" integrals from azimuthal angle "+this.azimuthalAngles[a]+".");this.anglesZValues[a]=[];this.anglesZValues[a].fill(null,0,this.width*this.height);for(b=0;b<d.length;b++){var f=0;for(var e=0;e<d[b].length;e++)this.anglesZValues[a][d[b][e].x+d[b][e].y*this.width]=f,f+=d[b][e].slope*-this.depthFactor}uiBaseLayer--}this.objString=
"";this.gpuVertices=[];this.gpuVertexErrorColors=[];b=this.width*this.height;uiLog("Summarizing data.");c=a=0;d=[];f=this.normalMap.getAsPixelArray();for(e=0;e<this.width;e+=1)for(let l=0;l<this.height;l+=1){var g=e+l*this.width;const k=4*g;let n=0;var h=0,m=this.anglesZValues.length;for(let p=0;p<this.anglesZValues.length;p++){const q=this.anglesZValues[p][g];isNaN(q)||(n+=q,0!==p&&(h+=Math.abs(this.anglesZValues[0][g]-q)))}n/=m;h/=m;c+=h/b;a=Math.max(a,h);d.push(h);this.gpuVertices.push(e/this.width-
.5,l/this.width-.5,n/this.width-.5);g=this.vertexAlbedoColors[k+0]/255;h=this.vertexAlbedoColors[k+1]/255;m=this.vertexAlbedoColors[k+2]/255;this.gpuVertexAlbedoColors.push(g,h,m);this.gpuVertexNormalColors.push(f[k+0]/255,f[k+1]/255,f[k+2]/255);this.objString+="v "+e+" "+l+" "+n+" "+g+" "+h+" "+m+"\n"}for(b=0;b<d.length;b++)this.gpuVertexErrorColors.push(d[b]/a,1-d[b]/a,0);uiLog("Average error of z values: "+c)}getObjString(){void 0===this.objString&&this.calculate();return this.objString}getGpuVertices(){void 0===
this.gpuVertices&&this.calculate();return this.gpuVertices}getGpuVertexAlbedoColors(){void 0===this.gpuVertexAlbedoColors&&this.calculate();return this.gpuVertexAlbedoColors}getGpuVertexNormalColors(){void 0===this.gpuVertexNormalColors&&this.calculate();return this.gpuVertexNormalColors}getGpuVertexErrorColors(){void 0===this.gpuVertexErrorColors&&this.calculate();return this.gpuVertexErrorColors}};